/*
 * !!! File autogenerated by convert-email-xml-inputs-to-swift.swift
 * !!! Don’t change manually.
 *
 * DominicSayersTests.swift
 * EmailTests
 *
 * Created by convert-email-xml-inputs-to-swift.swift on 2024-09-19T19:43:31Z.
 */

import XCTest

@testable import Email



class DominicSayersTests : XCTestCase {
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest1() {
		let email = ""
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNodomain)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest2() {
		let email = "test"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNodomain)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest3() {
		let email = "@"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNolocalpart)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest4() {
		let email = "test@"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNodomain)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest5() {
		let email = "test@io"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Tld)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest6() {
		let email = "@io"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNolocalpart)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest7() {
		let email = "@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNolocalpart)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest8() {
		let email = "test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest9() {
		let email = "test@nominet.org.uk"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest10() {
		let email = "test@about.museum"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest11() {
		let email = "a@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest12() {
		let email = "test@e.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest13() {
		let email = "test@iana.a"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest14() {
		let email = "test.test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest15() {
		let email = ".test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest16() {
		let email = "test.@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotEnd)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest17() {
		let email = "test..iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errConsecutivedots)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest18() {
		let email = "test_exa-mple.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNodomain)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest19() {
		let email = "!#$%&`*+/=?^`{|}~@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest20() {
		let email = "test\\@test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest21() {
		let email = "123@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest22() {
		let email = "test@123.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest23() {
		let email = "test@iana.123"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Tldnumeric)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest24() {
		let email = "test@255.255.255.255"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Tldnumeric)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest25() {
		let email = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghiklm@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest26() {
		let email = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghiklmn@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322LocalToolong)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest27() {
		let email = "test@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghikl.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest28() {
		let email = "test@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghiklm.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322LabelToolong)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest29() {
		let email = "test@mason-dixon.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest30() {
		let email = "test@-iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDomainhyphenstart)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest31() {
		let email = "test@iana-.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDomainhyphenend)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest32() {
		let email = "test@c--n.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest33() {
		let email = "test@iana.co-uk"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest34() {
		let email = "test@.iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest35() {
		let email = "test@iana.org."
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotEnd)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest36() {
		let email = "test@iana..com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errConsecutivedots)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest37() {
		let email = "a@a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest38() {
		let email = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghiklm@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghikl.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghikl.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghi"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest39() {
		let email = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghiklm@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghikl.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghikl.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghij"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Toolong)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest40() {
		let email = "a@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghikl.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghikl.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghikl.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.hij"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Toolong)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest41() {
		let email = "a@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghikl.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghikl.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghikl.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.hijk"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322DomainToolong)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest42() {
		let email = "\"test\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest43() {
		let email = "\"\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest44() {
		let email = "\"\"\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest45() {
		let email = "\"\\a\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest46() {
		let email = "\"\\\"\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest47() {
		let email = "\"\\\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedquotedstr)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest48() {
		let email = "\"\\\\\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest49() {
		let email = "test\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest50() {
		let email = "\"test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedquotedstr)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest51() {
		let email = "\"test\"test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterQs)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest52() {
		let email = "test\"text\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest53() {
		let email = "\"test\"\"test\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest54() {
		let email = "\"test\".\"test\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest55() {
		let email = "\"test\\ test\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest56() {
		let email = "\"test\".test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest57() {
		let email = "\"test\0\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingQtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest58() {
		let email = "\"test\\\0\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecQp)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest59() {
		let email = "\"abcdefghijklmnopqrstuvwxyz abcdefghijklmnopqrstuvwxyz abcdefghj\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322LocalToolong)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest60() {
		let email = "\"abcdefghijklmnopqrstuvwxyz abcdefghijklmnopqrstuvwxyz abcdefg\\h\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322LocalToolong)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest61() {
		let email = "test@[255.255.255.255]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest62() {
		let email = "test@a[255.255.255.255]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest63() {
		let email = "test@[255.255.255]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest64() {
		let email = "test@[255.255.255.255.255]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest65() {
		let email = "test@[255.255.255.256]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest66() {
		let email = "test@[1111:2222:3333:4444:5555:6666:7777:8888]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest67() {
		let email = "test@[IPv6:1111:2222:3333:4444:5555:6666:7777]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Grpcount)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest68() {
		let email = "test@[IPv6:1111:2222:3333:4444:5555:6666:7777:8888]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest69() {
		let email = "test@[IPv6:1111:2222:3333:4444:5555:6666:7777:8888:9999]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Grpcount)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest70() {
		let email = "test@[IPv6:1111:2222:3333:4444:5555:6666:7777:888G]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Badchar)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest71() {
		let email = "test@[IPv6:1111:2222:3333:4444:5555:6666::8888]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Ipv6Deprecated)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest72() {
		let email = "test@[IPv6:1111:2222:3333:4444:5555::8888]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest73() {
		let email = "test@[IPv6:1111:2222:3333:4444:5555:6666::7777:8888]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Maxgrps)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest74() {
		let email = "test@[IPv6::3333:4444:5555:6666:7777:8888]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonstrt)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest75() {
		let email = "test@[IPv6:::3333:4444:5555:6666:7777:8888]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest76() {
		let email = "test@[IPv6:1111::4444:5555::8888]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest77() {
		let email = "test@[IPv6:::]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest78() {
		let email = "test@[IPv6:1111:2222:3333:4444:5555:255.255.255.255]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Grpcount)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest79() {
		let email = "test@[IPv6:1111:2222:3333:4444:5555:6666:255.255.255.255]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest80() {
		let email = "test@[IPv6:1111:2222:3333:4444:5555:6666:7777:255.255.255.255]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Grpcount)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest81() {
		let email = "test@[IPv6:1111:2222:3333:4444::255.255.255.255]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest82() {
		let email = "test@[IPv6:1111:2222:3333:4444:5555:6666::255.255.255.255]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Maxgrps)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest83() {
		let email = "test@[IPv6:1111:2222:3333:4444:::255.255.255.255]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest84() {
		let email = "test@[IPv6::255.255.255.255]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonstrt)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest85() {
		let email = " test @iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest86() {
		let email = "test@ iana .com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest87() {
		let email = "test . test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecFws)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest88() {
		let email = "\r\n test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .cfws) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .cfwsFws)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest89() {
		let email = "\r\n \r\n test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecFws)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest90() {
		let email = "(comment)test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .cfws) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .cfwsComment)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest91() {
		let email = "((comment)test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedcomment)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest92() {
		let email = "(comment(comment))test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .cfws) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .cfwsComment)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest93() {
		let email = "test@(comment)iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest94() {
		let email = "test(comment)test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterCfws)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest95() {
		let email = "test@(comment)[255.255.255.255]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest96() {
		let email = "(comment)abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghiklm@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .cfws) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .cfwsComment)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest97() {
		let email = "test@(comment)abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghikl.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest98() {
		let email = "(comment)test@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghik.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghik.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijk.abcdefghijklmnopqrstuvwxyzabcdefghijk.abcdefghijklmnopqrstu"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .cfws) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .cfwsComment)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest99() {
		let email = "test@iana.org\n"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest100() {
		let email = "test@xn--hxajbheg2az3al.xn--jxalpdlp"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest101() {
		let email = "xn--test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest102() {
		let email = "test@iana.org-"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDomainhyphenend)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest103() {
		let email = "\"test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedquotedstr)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest104() {
		let email = "(test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedcomment)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest105() {
		let email = "test@(iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedcomment)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest106() {
		let email = "test@[1.2.3.4"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUncloseddomlit)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest107() {
		let email = "\"test\\\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedquotedstr)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest108() {
		let email = "(comment\\)test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedcomment)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest109() {
		let email = "test@iana.org(comment\\)"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedcomment)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest110() {
		let email = "test@iana.org(comment\\"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errBackslashend)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest112() {
		let email = "test@[RFC-5322-domain-literal]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest113() {
		let email = "test@[RFC-5322]-domain-literal]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterDomlit)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest114() {
		let email = "test@[RFC-5322-[domain-literal]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingDtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest115() {
		let email = "test@[RFC-5322-\\\u{07}-domain-literal]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322DomlitObsdtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest116() {
		let email = "test@[RFC-5322-\\\t-domain-literal]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322DomlitObsdtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest117() {
		let email = "test@[RFC-5322-\\]-domain-literal]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322DomlitObsdtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest118() {
		let email = "test@[RFC-5322-domain-literal\\]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUncloseddomlit)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest119() {
		let email = "test@[RFC-5322-domain-literal\\"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errBackslashend)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest120() {
		let email = "test@[RFC 5322 domain literal]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest121() {
		let email = "test@[RFC-5322-domain-literal] (comment)"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest122() {
		let email = "\u{7F}@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest123() {
		let email = "test@\u{7F}.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest124() {
		let email = "\"\u{7F}\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecQtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest125() {
		let email = "\"\\\u{7F}\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecQp)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest126() {
		let email = "(\u{7F})test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest127() {
		let email = "test@iana.org\r"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errCrNoLf)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest128() {
		let email = "\rtest@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errCrNoLf)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest129() {
		let email = "\"\rtest\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errCrNoLf)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest130() {
		let email = "(\r)test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errCrNoLf)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest131() {
		let email = "test@iana.org(\r)"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errCrNoLf)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest132() {
		let email = "\ntest@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest133() {
		let email = "\"\n\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingQtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest134() {
		let email = "\"\\\n\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecQp)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest135() {
		let email = "(\n)test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingCtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest136() {
		let email = "\u{07}@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest137() {
		let email = "test@\u{07}.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest138() {
		let email = "\"\u{07}\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecQtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest139() {
		let email = "\"\\\u{07}\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecQp)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest140() {
		let email = "(\u{07})test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest141() {
		let email = "\r\ntest@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest142() {
		let email = "\r\n \r\ntest@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest143() {
		let email = " \r\ntest@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest144() {
		let email = " \r\n test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .cfws) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .cfwsFws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest145() {
		let email = " \r\n \r\ntest@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest146() {
		let email = " \r\n\r\ntest@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfX2)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest147() {
		let email = " \r\n\r\n test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfX2)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest148() {
		let email = "test@iana.org\r\n "
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .cfws) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .cfwsFws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest149() {
		let email = "test@iana.org\r\n \r\n "
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecFws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest150() {
		let email = "test@iana.org\r\n"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest151() {
		let email = "test@iana.org\r\n \r\n"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest152() {
		let email = "test@iana.org \r\n"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest153() {
		let email = "test@iana.org \r\n "
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .cfws) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .cfwsFws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest154() {
		let email = "test@iana.org \r\n \r\n"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest155() {
		let email = "test@iana.org \r\n\r\n"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfX2)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest156() {
		let email = "test@iana.org \r\n\r\n "
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfX2)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest157() {
		let email = " test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .cfws) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .cfwsFws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest158() {
		let email = "test@iana.org "
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .cfws) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .cfwsFws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest159() {
		let email = "test@[IPv6:1::2:]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonend)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest160() {
		let email = "\"test\\©\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingQpair)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest161() {
		let email = "test@iana/icann.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domain)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest165() {
		let email = "test.(comment)test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecComment)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest166() {
		let email = "test@org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Tld)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest167() {
		let email = "test@test.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest168() {
		let email = "test@nic.no"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal1() {
		let email = "first.last@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal2() {
		let email = "1234567890123456789012345678901234567890123456789012345678901234@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Rob <bob@bob.com> (https://isemail.info) */
	func testXMLTestOriginal3() {
		let email = "first.last@sub.do,com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal4() {
		let email = "\"first\\\"last\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal5() {
		let email = "first\\@last@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal6() {
		let email = "\"first@last\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal7() {
		let email = "\"first\\\\last\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal8() {
		let email = "x@x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x2"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From RFC 3696 erratum 1690 (https://www.rfc-editor.org/errata_search.php?rfc=3696&eid=1690) */
	func testXMLTestOriginal9() {
		let email = "1234567890123456789012345678901234567890123456789012345678901@12345678901234567890123456789012345678901234567890123456789.12345678901234567890123456789012345678901234567890123456789.123456789012345678901234567890123456789012345678901234567890123.iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From RFC 3696 erratum 1690 (https://www.rfc-editor.org/errata_search.php?rfc=3696&eid=1690) */
	func testXMLTestOriginal10() {
		let email = "first.last@[12.34.56.78]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal11() {
		let email = "first.last@[IPv6:::12.34.56.78]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal12() {
		let email = "first.last@[IPv6:1111:2222:3333::4444:12.34.56.78]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal13() {
		let email = "first.last@[IPv6:1111:2222:3333:4444:5555:6666:12.34.56.78]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal14() {
		let email = "first.last@[IPv6:::1111:2222:3333:4444:5555:6666]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal15() {
		let email = "first.last@[IPv6:1111:2222:3333::4444:5555:6666]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal16() {
		let email = "first.last@[IPv6:1111:2222:3333:4444:5555:6666::]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal17() {
		let email = "first.last@[IPv6:1111:2222:3333:4444:5555:6666:7777:8888]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal18() {
		let email = "first.last@x23456789012345678901234567890123456789012345678901234567890123.iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal19() {
		let email = "first.last@3com.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal20() {
		let email = "first.last@123.iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From RFC 3696 erratum 1690 (https://www.rfc-editor.org/errata_search.php?rfc=3696&eid=1690) */
	func testXMLTestOriginal21() {
		let email = "123456789012345678901234567890123456789012345678901234567890@12345678901234567890123456789012345678901234567890123456789.12345678901234567890123456789012345678901234567890123456789.12345678901234567890123456789012345678901234567890123456789.12345.iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Toolong)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal22() {
		let email = "first.last"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNodomain)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal23() {
		let email = "12345678901234567890123456789012345678901234567890123456789012345@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322LocalToolong)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal24() {
		let email = ".first.last@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal25() {
		let email = "first.last.@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal26() {
		let email = "first..last@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errConsecutivedots)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal27() {
		let email = "\"first\"last\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterQs)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal28() {
		let email = "\"first\\last\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal29() {
		let email = "\"\"\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal30() {
		let email = "\"\\\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedquotedstr)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal31() {
		let email = "\"\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal32() {
		let email = "first\\\\@last@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal33() {
		let email = "first.last@"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNodomain)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal34() {
		let email = "x@x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456789.x23456"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322DomainToolong)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal35() {
		let email = "first.last@[.12.34.56.78]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal36() {
		let email = "first.last@[12.34.56.789]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal37() {
		let email = "first.last@[::12.34.56.78]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal38() {
		let email = "first.last@[IPv5:::12.34.56.78]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal39() {
		let email = "first.last@[IPv6:1111:2222:3333::4444:5555:12.34.56.78]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Ipv6Deprecated)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal40() {
		let email = "first.last@[IPv6:1111:2222:3333:4444:5555:12.34.56.78]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Grpcount)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal41() {
		let email = "first.last@[IPv6:1111:2222:3333:4444:5555:6666:7777:12.34.56.78]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Grpcount)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal42() {
		let email = "first.last@[IPv6:1111:2222:3333:4444:5555:6666:7777]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Grpcount)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal43() {
		let email = "first.last@[IPv6:1111:2222:3333:4444:5555:6666:7777:8888:9999]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Grpcount)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal44() {
		let email = "first.last@[IPv6:1111:2222::3333::4444:5555:6666]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal45() {
		let email = "first.last@[IPv6:1111:2222:3333::4444:5555:6666:7777]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Ipv6Deprecated)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal46() {
		let email = "first.last@[IPv6:1111:2222:333x::4444:5555]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Badchar)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal47() {
		let email = "first.last@[IPv6:1111:2222:33333::4444:5555]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Badchar)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal48() {
		let email = "first.last@example.123"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Tldnumeric)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal49() {
		let email = "first.last@com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Tld)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal50() {
		let email = "first.last@-xample.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDomainhyphenstart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal51() {
		let email = "first.last@exampl-.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDomainhyphenend)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal52() {
		let email = "first.last@x234567890123456789012345678901234567890123456789012345678901234.iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322LabelToolong)
	}
	
	/* From RFC 3696 (February 2004) (https://tools.ietf.org/html/rfc3696#section-3) */
	func testXMLTestOriginal53() {
		let email = "\"Abc\\@def\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From RFC 3696 (as amended by erratum 2005-07-09) (https://www.rfc-editor.org/errata_search.php?rfc=3696&eid=246) */
	func testXMLTestOriginal54() {
		let email = "\"Fred\\ Bloggs\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From RFC 3696 (as amended by erratum 2005-07-09) (https://www.rfc-editor.org/errata_search.php?rfc=3696&eid=246) */
	func testXMLTestOriginal55() {
		let email = "\"Joe.\\\\Blow\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From RFC 3696 (as amended by erratum 2005-07-09) (https://www.rfc-editor.org/errata_search.php?rfc=3696&eid=246) */
	func testXMLTestOriginal56() {
		let email = "\"Abc@def\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From RFC 3696 (February 2004) (https://tools.ietf.org/html/rfc3696#section-3) */
	func testXMLTestOriginal57() {
		let email = "\"Fred Bloggs\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From RFC 3696 (February 2004) (https://tools.ietf.org/html/rfc3696#section-3) */
	func testXMLTestOriginal58() {
		let email = "user+mailbox@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From RFC 3696 (February 2004) (https://tools.ietf.org/html/rfc3696#section-3) */
	func testXMLTestOriginal59() {
		let email = "customer/department=shipping@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From RFC 3696 (February 2004) (https://tools.ietf.org/html/rfc3696#section-3) */
	func testXMLTestOriginal60() {
		let email = "$A12345@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From RFC 3696 (February 2004) (https://tools.ietf.org/html/rfc3696#section-3) */
	func testXMLTestOriginal61() {
		let email = "!def!xyz%abc@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From RFC 3696 (February 2004) (https://tools.ietf.org/html/rfc3696#section-3) */
	func testXMLTestOriginal62() {
		let email = "_somename@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal63() {
		let email = "dclo@us.ibm.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal64() {
		let email = "abc\\@def@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal65() {
		let email = "abc\\\\@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal66() {
		let email = "peter.piper@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal67() {
		let email = "Doug\\ \\\"Ace\\\"\\ Lovell@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal68() {
		let email = "\"Doug \\\"Ace\\\" L.\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal69() {
		let email = "abc@def@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal70() {
		let email = "abc\\\\@def@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal71() {
		let email = "abc\\@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal72() {
		let email = "@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNolocalpart)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal73() {
		let email = "doug@"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNodomain)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal74() {
		let email = "\"qu@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedquotedstr)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal75() {
		let email = "ote\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal76() {
		let email = ".dot@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal77() {
		let email = "dot.@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotEnd)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal78() {
		let email = "two..dot@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errConsecutivedots)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal79() {
		let email = "\"Doug \"Ace\" L.\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterQs)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal80() {
		let email = "Doug\\ \\\"Ace\\\"\\ L\\.@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal81() {
		let email = "hello world@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterCfws)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal82() {
		let email = "gatsby@f.sc.ot.t.f.i.tzg.era.l.d."
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotEnd)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal83() {
		let email = "test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal84() {
		let email = "TEST@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal85() {
		let email = "1234567890@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal86() {
		let email = "test+test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal87() {
		let email = "test-test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal88() {
		let email = "t*est@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal89() {
		let email = "+1~1+@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal90() {
		let email = "{_test_}@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal91() {
		let email = "\"[[ test ]]\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal92() {
		let email = "test.test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal93() {
		let email = "\"test.test\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal94() {
		let email = "test.\"test\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal95() {
		let email = "\"test@test\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal96() {
		let email = "test@123.123.123.x123"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal97() {
		let email = "test@123.123.123.123"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Tldnumeric)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal98() {
		let email = "test@[123.123.123.123]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal99() {
		let email = "test@example.iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal100() {
		let email = "test@example.example.iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal101() {
		let email = "test.iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNodomain)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal102() {
		let email = "test.@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotEnd)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal103() {
		let email = "test..test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errConsecutivedots)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal104() {
		let email = ".test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal105() {
		let email = "test@test@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal106() {
		let email = "test@@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal107() {
		let email = "-- test --@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterCfws)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal108() {
		let email = "[test]@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal109() {
		let email = "\"test\\test\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal110() {
		let email = "\"test\"test\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterQs)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal111() {
		let email = "()[]\\;:,><@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal112() {
		let email = "test@."
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal113() {
		let email = "test@example."
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotEnd)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal114() {
		let email = "test@.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal115() {
		let email = "test@123456789012345678901234567890123456789012345678901234567890123.123456789012345678901234567890123456789012345678901234567890123.123456789012345678901234567890123456789012345678901234567890123.123456789012345678901234567890123456789012345678901234567890.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322DomainToolong)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal116() {
		let email = "test@example"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Tld)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal117() {
		let email = "test@[123.123.123.123"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUncloseddomlit)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal118() {
		let email = "test@123.123.123.123]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal119() {
		let email = "NotAnEmail"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNodomain)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal120() {
		let email = "@NotAnEmail"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNolocalpart)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal121() {
		let email = "\"test\\\\blah\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal122() {
		let email = "\"test\\blah\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal123() {
		let email = "\"test\\\rblah\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecQp)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal124() {
		let email = "\"test\rblah\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errCrNoLf)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal125() {
		let email = "\"test\\\"blah\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal126() {
		let email = "\"test\"blah\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterQs)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal127() {
		let email = "customer/department@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal128() {
		let email = "_Yosemite.Sam@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal129() {
		let email = "~@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal130() {
		let email = ".wooly@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal131() {
		let email = "wo..oly@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errConsecutivedots)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal132() {
		let email = "pootietang.@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotEnd)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal133() {
		let email = ".@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal134() {
		let email = "\"Austin@Powers\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal135() {
		let email = "Ima.Fool@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal136() {
		let email = "\"Ima.Fool\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal137() {
		let email = "\"Ima Fool\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal138() {
		let email = "Ima Fool@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterCfws)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal139() {
		let email = "phil.h\\@\\@ck@haacked.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal140() {
		let email = "\"first\".\"last\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal141() {
		let email = "\"first\".middle.\"last\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal142() {
		let email = "\"first\\\\\"last\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterQs)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal143() {
		let email = "\"first\".last@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal144() {
		let email = "first.\"last\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal145() {
		let email = "\"first\".\"middle\".\"last\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal146() {
		let email = "\"first.middle\".\"last\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal147() {
		let email = "\"first.middle.last\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal148() {
		let email = "\"first..last\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal149() {
		let email = "foo@[\\1.2.3.4]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322DomlitObsdtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal150() {
		let email = "\"first\\\\\\\"last\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal151() {
		let email = "first.\"mid\\dle\".\"last\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal152() {
		let email = "Test.\r\n Folding.\r\n Whitespace@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecFws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal153() {
		let email = "first.\"\".last@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal154() {
		let email = "first\\last@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From RFC 3696 erratum 246 (https://www.rfc-editor.org/errata_search.php?rfc=3696&eid=246) */
	func testXMLTestOriginal155() {
		let email = "Abc\\@def@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From RFC 3696 erratum 246 (https://www.rfc-editor.org/errata_search.php?rfc=3696&eid=246) */
	func testXMLTestOriginal156() {
		let email = "Fred\\ Bloggs@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From RFC 3696 erratum 246 (https://www.rfc-editor.org/errata_search.php?rfc=3696&eid=246) */
	func testXMLTestOriginal157() {
		let email = "Joe.\\\\Blow@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal158() {
		let email = "first.last@[IPv6:1111:2222:3333:4444:5555:6666:12.34.567.89]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Badchar)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal159() {
		let email = "\"test\\\r\n blah\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingQtext)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal160() {
		let email = "\"test\r\n blah\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .cfws) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .cfwsFws)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal161() {
		let email = "{^c\\@**Dog^}@cartoon.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal162() {
		let email = "(foo)cal(bar)@(baz)iamcal.com(quux)"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal163() {
		let email = "cal@iamcal(woo).(yay)com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecComment)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal164() {
		let email = "\"foo\"(yay)@(hoopla)[1.2.3.4]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal165() {
		let email = "cal(woo(yay)hoopla)@iamcal.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal166() {
		let email = "cal(foo\\@bar)@iamcal.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal167() {
		let email = "cal(foo\\)bar)@iamcal.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal168() {
		let email = "cal(foo(bar)@iamcal.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedcomment)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal169() {
		let email = "cal(foo)bar)@iamcal.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterCfws)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal170() {
		let email = "cal(foo\\)@iamcal.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedcomment)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal171() {
		let email = "first().last@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal172() {
		let email = "first.(\r\n middle\r\n )last@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecComment)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal173() {
		let email = "first(12345678901234567890123456789012345678901234567890)last@(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterCfws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal174() {
		let email = "first(Welcome to\r\n the (\"wonderful\" (!)) world\r\n of email)@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From RFC 5322 (https://tools.ietf.org/html/rfc5322) */
	func testXMLTestOriginal175() {
		let email = "pete(his account)@silly.test(his host)"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From RFC 5322 (https://tools.ietf.org/html/rfc5322) */
	func testXMLTestOriginal176() {
		let email = "c@(Chris\'s host.)public.example"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From RFC 5322 (https://tools.ietf.org/html/rfc5322) */
	func testXMLTestOriginal177() {
		let email = "jdoe@machine(comment).  example"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecFws)
	}
	
	/* From RFC 5322 (https://tools.ietf.org/html/rfc5322) */
	func testXMLTestOriginal178() {
		let email = "1234   @   local(blah)  .machine .example"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal179() {
		let email = "first(middle)last@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterCfws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal180() {
		let email = "first(abc.def).last@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal181() {
		let email = "first(a\"bc.def).last@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal182() {
		let email = "first.(\")middle.last(\")@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal183() {
		let email = "first(abc(\"def\".ghi).mno)middle(abc(\"def\".ghi).mno).last@(abc(\"def\".ghi).mno)example(abc(\"def\".ghi).mno).(abc(\"def\".ghi).mno)com(abc(\"def\".ghi).mno)"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterCfws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal184() {
		let email = "first(abc\\(def)@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal185() {
		let email = "first.last@iana(1234567890123456789012345678901234567890123456789012345678901234567890).org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .cfws) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .cfwsComment)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal186() {
		let email = "a(a(b(c)d(e(f))g)h(i)j)@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal187() {
		let email = "a(a(b(c)d(e(f))g)(h(i)j)@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedcomment)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal188() {
		let email = "name.lastname@domain.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal189() {
		let email = ".@"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal190() {
		let email = "a@b"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Tld)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal191() {
		let email = "@bar.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNolocalpart)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal192() {
		let email = "@@bar.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNolocalpart)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal193() {
		let email = "a@bar.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal194() {
		let email = "aaa.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNodomain)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal195() {
		let email = "aaa@.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal196() {
		let email = "aaa@.123"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal197() {
		let email = "aaa@[123.123.123.123]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal198() {
		let email = "aaa@[123.123.123.123]a"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterDomlit)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal199() {
		let email = "aaa@[123.123.123.333]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal200() {
		let email = "a@bar.com."
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotEnd)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal201() {
		let email = "a@bar"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Tld)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal202() {
		let email = "a-b@bar.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal203() {
		let email = "+@b.c"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal204() {
		let email = "+@b.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal205() {
		let email = "a@-b.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDomainhyphenstart)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal206() {
		let email = "a@b-.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDomainhyphenend)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal207() {
		let email = "-@..com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal208() {
		let email = "-@a..com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errConsecutivedots)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal209() {
		let email = "a@b.co-foo.uk"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal210() {
		let email = "\"hello my name is\"@stutter.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal211() {
		let email = "\"Test \\\"Fail\\\" Ing\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal212() {
		let email = "valid@about.museum"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal213() {
		let email = "invalid@about.museum-"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDomainhyphenend)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal214() {
		let email = "shaitan@my-domain.thisisminekthx"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal215() {
		let email = "test@...........com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal216() {
		let email = "foobar@192.168.0.1"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Tldnumeric)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal217() {
		let email = "\"Joe\\\\Blow\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal218() {
		let email = "Invalid \\\n Folding \\\n Whitespace@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterCfws)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal219() {
		let email = "HM2Kinsists@(that comments are allowed)this.is.ok"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal220() {
		let email = "user%uucp!path@berkeley.edu"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal221() {
		let email = "\"first(last)\"@iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal222() {
		let email = " \r\n (\r\n x \r\n ) \r\n first\r\n ( \r\n x\r\n ) \r\n .\r\n ( \r\n x) \r\n last \r\n (  x \r\n ) \r\n @iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From John Kloor (https://isemail.info) */
	func testXMLTestOriginal223() {
		let email = "first.last @iana.org"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From George Pollard (https://porg.es/blog/properly-validating-e-mail-addresses) */
	func testXMLTestOriginal224() {
		let email = "test. \r\n \r\n obs@syntax.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecFws)
	}
	
	/* From George Pollard (https://porg.es/blog/properly-validating-e-mail-addresses) */
	func testXMLTestOriginal225() {
		let email = "test.\r\n\r\n obs@syntax.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfX2)
	}
	
	/* From George Pollard (https://porg.es/blog/properly-validating-e-mail-addresses) */
	func testXMLTestOriginal226() {
		let email = "\"Unicode NULL \\\0\"@char.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecQp)
	}
	
	/* From George Pollard (https://porg.es/blog/properly-validating-e-mail-addresses) */
	func testXMLTestOriginal227() {
		let email = "\"Unicode NULL \0\"@char.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingQtext)
	}
	
	/* From George Pollard (https://porg.es/blog/properly-validating-e-mail-addresses) */
	func testXMLTestOriginal228() {
		let email = "Unicode NULL \\\0@char.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterCfws)
	}
	
	/* From cdburgess (https://isemail.info/#comment-30024957) */
	func testXMLTestOriginal229() {
		let email = "cdburgess+!#$%&\'*-/=?+_{}|~test@gmail.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal230() {
		let email = "first.last@[IPv6:::a2:a3:a4:b1:b2:b3:b4]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Ipv6Deprecated)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal231() {
		let email = "first.last@[IPv6:a1:a2:a3:a4:b1:b2:b3::]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Ipv6Deprecated)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal232() {
		let email = "first.last@[IPv6::]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonstrt)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal233() {
		let email = "first.last@[IPv6:::]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal234() {
		let email = "first.last@[IPv6::::]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal235() {
		let email = "first.last@[IPv6::b4]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonstrt)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal236() {
		let email = "first.last@[IPv6:::b4]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal237() {
		let email = "first.last@[IPv6::::b4]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal238() {
		let email = "first.last@[IPv6::b3:b4]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonstrt)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal239() {
		let email = "first.last@[IPv6:::b3:b4]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal240() {
		let email = "first.last@[IPv6::::b3:b4]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal241() {
		let email = "first.last@[IPv6:a1::b4]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal242() {
		let email = "first.last@[IPv6:a1:::b4]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal243() {
		let email = "first.last@[IPv6:a1:]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonend)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal244() {
		let email = "first.last@[IPv6:a1::]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal245() {
		let email = "first.last@[IPv6:a1:::]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal246() {
		let email = "first.last@[IPv6:a1:a2:]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonend)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal247() {
		let email = "first.last@[IPv6:a1:a2::]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal248() {
		let email = "first.last@[IPv6:a1:a2:::]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal249() {
		let email = "first.last@[IPv6:0123:4567:89ab:cdef::]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal250() {
		let email = "first.last@[IPv6:0123:4567:89ab:CDEF::]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal251() {
		let email = "first.last@[IPv6:::a3:a4:b1:ffff:11.22.33.44]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal252() {
		let email = "first.last@[IPv6:::a2:a3:a4:b1:ffff:11.22.33.44]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Ipv6Deprecated)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal253() {
		let email = "first.last@[IPv6:a1:a2:a3:a4::11.22.33.44]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal254() {
		let email = "first.last@[IPv6:a1:a2:a3:a4:b1::11.22.33.44]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Ipv6Deprecated)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal255() {
		let email = "first.last@[IPv6::11.22.33.44]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonstrt)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal256() {
		let email = "first.last@[IPv6::::11.22.33.44]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal257() {
		let email = "first.last@[IPv6:a1:11.22.33.44]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Grpcount)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal258() {
		let email = "first.last@[IPv6:a1::11.22.33.44]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal259() {
		let email = "first.last@[IPv6:a1:::11.22.33.44]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal260() {
		let email = "first.last@[IPv6:a1:a2::11.22.33.44]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal261() {
		let email = "first.last@[IPv6:a1:a2:::11.22.33.44]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal262() {
		let email = "first.last@[IPv6:0123:4567:89ab:cdef::11.22.33.44]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal263() {
		let email = "first.last@[IPv6:0123:4567:89ab:cdef::11.22.33.xx]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Badchar)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal264() {
		let email = "first.last@[IPv6:0123:4567:89ab:CDEF::11.22.33.44]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal265() {
		let email = "first.last@[IPv6:0123:4567:89ab:CDEFF::11.22.33.44]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Badchar)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal266() {
		let email = "first.last@[IPv6:a1::a4:b1::b4:11.22.33.44]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal267() {
		let email = "first.last@[IPv6:a1::11.22.33]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Badchar)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal268() {
		let email = "first.last@[IPv6:a1::11.22.33.44.55]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Badchar)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal269() {
		let email = "first.last@[IPv6:a1::b211.22.33.44]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Badchar)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal270() {
		let email = "first.last@[IPv6:a1::b2:11.22.33.44]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal271() {
		let email = "first.last@[IPv6:a1::b2::11.22.33.44]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal272() {
		let email = "first.last@[IPv6:a1::b3:]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonend)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal273() {
		let email = "first.last@[IPv6::a2::b4]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonstrt)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal274() {
		let email = "first.last@[IPv6:a1:a2:a3:a4:b1:b2:b3:]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonend)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal275() {
		let email = "first.last@[IPv6::a2:a3:a4:b1:b2:b3:b4]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonstrt)
	}
	
	/* From Daniel Marschall (https://isemail.info) */
	func testXMLTestOriginal276() {
		let email = "first.last@[IPv6:a1:a2:a3:a4::b1:b2:b3:b4]"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Maxgrps)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal277() {
		let email = "test@test.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestOriginal278() {
		let email = "test@example.com\n"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestOriginal279() {
		let email = "test@xn--example.com"
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
}
