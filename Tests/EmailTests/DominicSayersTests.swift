/*
 * !!! File autogenerated by convert-email-xml-inputs-to-swift.swift
 * !!! Don’t change manually.
 *
 * DominicSayersTests.swift
 * EmailTests
 *
 * Created by convert-email-xml-inputs-to-swift.swift on 2024-09-19T19:10:21Z.
 */

import XCTest

@testable import Email



class DominicSayersTests : XCTestCase {
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest1() {
		let email = String(data: Data(base64Encoded: "")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNodomain)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest2() {
		let email = String(data: Data(base64Encoded: "dGVzdA==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNodomain)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest3() {
		let email = String(data: Data(base64Encoded: "QA==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNolocalpart)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest4() {
		let email = String(data: Data(base64Encoded: "dGVzdEA=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNodomain)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest5() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpbw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Tld)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest6() {
		let email = String(data: Data(base64Encoded: "QGlv")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNolocalpart)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest7() {
		let email = String(data: Data(base64Encoded: "QGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNolocalpart)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest8() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest9() {
		let email = String(data: Data(base64Encoded: "dGVzdEBub21pbmV0Lm9yZy51aw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest10() {
		let email = String(data: Data(base64Encoded: "dGVzdEBhYm91dC5tdXNldW0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest11() {
		let email = String(data: Data(base64Encoded: "YUBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest12() {
		let email = String(data: Data(base64Encoded: "dGVzdEBlLmNvbQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest13() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hLmE=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest14() {
		let email = String(data: Data(base64Encoded: "dGVzdC50ZXN0QGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest15() {
		let email = String(data: Data(base64Encoded: "LnRlc3RAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest16() {
		let email = String(data: Data(base64Encoded: "dGVzdC5AaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotEnd)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest17() {
		let email = String(data: Data(base64Encoded: "dGVzdC4uaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errConsecutivedots)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest18() {
		let email = String(data: Data(base64Encoded: "dGVzdF9leGEtbXBsZS5jb20=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNodomain)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest19() {
		let email = String(data: Data(base64Encoded: "ISMkJSZgKisvPT9eYHt8fX5AaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest20() {
		let email = String(data: Data(base64Encoded: "dGVzdFxAdGVzdEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest21() {
		let email = String(data: Data(base64Encoded: "MTIzQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest22() {
		let email = String(data: Data(base64Encoded: "dGVzdEAxMjMuY29t")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest23() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hLjEyMw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Tldnumeric)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest24() {
		let email = String(data: Data(base64Encoded: "dGVzdEAyNTUuMjU1LjI1NS4yNTU=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Tldnumeric)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest25() {
		let email = String(data: Data(base64Encoded: "YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5emFiY2RlZmdoaWtsbUBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest26() {
		let email = String(data: Data(base64Encoded: "YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5emFiY2RlZmdoaWtsbW5AaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322LocalToolong)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest27() {
		let email = String(data: Data(base64Encoded: "dGVzdEBhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5emFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6YWJjZGVmZ2hpa2wuY29t")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest28() {
		let email = String(data: Data(base64Encoded: "dGVzdEBhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5emFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6YWJjZGVmZ2hpa2xtLmNvbQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322LabelToolong)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest29() {
		let email = String(data: Data(base64Encoded: "dGVzdEBtYXNvbi1kaXhvbi5jb20=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest30() {
		let email = String(data: Data(base64Encoded: "dGVzdEAtaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDomainhyphenstart)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest31() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hLS5jb20=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDomainhyphenend)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest32() {
		let email = String(data: Data(base64Encoded: "dGVzdEBjLS1uLmNvbQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest33() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hLmNvLXVr")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest34() {
		let email = String(data: Data(base64Encoded: "dGVzdEAuaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest35() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hLm9yZy4=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotEnd)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest36() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hLi5jb20=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errConsecutivedots)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest37() {
		let email = String(data: Data(base64Encoded: "YUBhLmIuYy5kLmUuZi5nLmguaS5qLmsubC5tLm4uby5wLnEuci5zLnQudS52LncueC55LnouYS5iLmMuZC5lLmYuZy5oLmkuai5rLmwubS5uLm8ucC5xLnIucy50LnUudi53LngueS56LmEuYi5jLmQuZS5mLmcuaC5pLmouay5sLm0ubi5vLnAucS5yLnMudC51LnYudy54Lnkuei5hLmIuYy5kLmUuZi5nLmguaS5qLmsubC5tLm4uby5wLnEuci5zLnQudS52LncueC55LnouYS5iLmMuZC5lLmYuZy5oLmkuai5rLmwubS5uLm8ucC5xLnIucy50LnUudg==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest38() {
		let email = String(data: Data(base64Encoded: "YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5emFiY2RlZmdoaWtsbUBhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5emFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6YWJjZGVmZ2hpa2wuYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5emFiY2RlZmdoaWtsLmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXphYmNkZWZnaGk=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest39() {
		let email = String(data: Data(base64Encoded: "YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5emFiY2RlZmdoaWtsbUBhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5emFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6YWJjZGVmZ2hpa2wuYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5emFiY2RlZmdoaWtsLmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXphYmNkZWZnaGlq")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Toolong)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest40() {
		let email = String(data: Data(base64Encoded: "YUBhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5emFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6YWJjZGVmZ2hpa2wuYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5emFiY2RlZmdoaWtsLmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXphYmNkZWZnaGlrbC5hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5emFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6YWJjZGVmZy5oaWo=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Toolong)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest41() {
		let email = String(data: Data(base64Encoded: "YUBhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5emFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6YWJjZGVmZ2hpa2wuYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5emFiY2RlZmdoaWtsLmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXphYmNkZWZnaGlrbC5hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5emFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6YWJjZGVmZy5oaWpr")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322DomainToolong)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest42() {
		let email = String(data: Data(base64Encoded: "InRlc3QiQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest43() {
		let email = String(data: Data(base64Encoded: "IiJAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest44() {
		let email = String(data: Data(base64Encoded: "IiIiQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest45() {
		let email = String(data: Data(base64Encoded: "IlxhIkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest46() {
		let email = String(data: Data(base64Encoded: "IlwiIkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest47() {
		let email = String(data: Data(base64Encoded: "IlwiQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedquotedstr)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest48() {
		let email = String(data: Data(base64Encoded: "IlxcIkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest49() {
		let email = String(data: Data(base64Encoded: "dGVzdCJAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest50() {
		let email = String(data: Data(base64Encoded: "InRlc3RAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedquotedstr)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest51() {
		let email = String(data: Data(base64Encoded: "InRlc3QidGVzdEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterQs)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest52() {
		let email = String(data: Data(base64Encoded: "dGVzdCJ0ZXh0IkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest53() {
		let email = String(data: Data(base64Encoded: "InRlc3QiInRlc3QiQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest54() {
		let email = String(data: Data(base64Encoded: "InRlc3QiLiJ0ZXN0IkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest55() {
		let email = String(data: Data(base64Encoded: "InRlc3RcIHRlc3QiQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest56() {
		let email = String(data: Data(base64Encoded: "InRlc3QiLnRlc3RAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest57() {
		let email = String(data: Data(base64Encoded: "InRlc3QAIkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingQtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest58() {
		let email = String(data: Data(base64Encoded: "InRlc3RcACJAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecQp)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest59() {
		let email = String(data: Data(base64Encoded: "ImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6IGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6IGFiY2RlZmdoaiJAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322LocalToolong)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest60() {
		let email = String(data: Data(base64Encoded: "ImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6IGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6IGFiY2RlZmdcaCJAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322LocalToolong)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest61() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbMjU1LjI1NS4yNTUuMjU1XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest62() {
		let email = String(data: Data(base64Encoded: "dGVzdEBhWzI1NS4yNTUuMjU1LjI1NV0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest63() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbMjU1LjI1NS4yNTVd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest64() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbMjU1LjI1NS4yNTUuMjU1LjI1NV0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest65() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbMjU1LjI1NS4yNTUuMjU2XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest66() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbMTExMToyMjIyOjMzMzM6NDQ0NDo1NTU1OjY2NjY6Nzc3Nzo4ODg4XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest67() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo0NDQ0OjU1NTU6NjY2Njo3Nzc3XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Grpcount)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest68() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo0NDQ0OjU1NTU6NjY2Njo3Nzc3Ojg4ODhd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest69() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo0NDQ0OjU1NTU6NjY2Njo3Nzc3Ojg4ODg6OTk5OV0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Grpcount)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest70() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo0NDQ0OjU1NTU6NjY2Njo3Nzc3Ojg4OEdd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Badchar)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest71() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo0NDQ0OjU1NTU6NjY2Njo6ODg4OF0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Ipv6Deprecated)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest72() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo0NDQ0OjU1NTU6Ojg4ODhd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest73() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo0NDQ0OjU1NTU6NjY2Njo6Nzc3Nzo4ODg4XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Maxgrps)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest74() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbSVB2Njo6MzMzMzo0NDQ0OjU1NTU6NjY2Njo3Nzc3Ojg4ODhd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonstrt)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest75() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbSVB2Njo6OjMzMzM6NDQ0NDo1NTU1OjY2NjY6Nzc3Nzo4ODg4XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest76() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbSVB2NjoxMTExOjo0NDQ0OjU1NTU6Ojg4ODhd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest77() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbSVB2Njo6Ol0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest78() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo0NDQ0OjU1NTU6MjU1LjI1NS4yNTUuMjU1XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Grpcount)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest79() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo0NDQ0OjU1NTU6NjY2NjoyNTUuMjU1LjI1NS4yNTVd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest80() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo0NDQ0OjU1NTU6NjY2Njo3Nzc3OjI1NS4yNTUuMjU1LjI1NV0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Grpcount)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest81() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo0NDQ0OjoyNTUuMjU1LjI1NS4yNTVd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest82() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo0NDQ0OjU1NTU6NjY2Njo6MjU1LjI1NS4yNTUuMjU1XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Maxgrps)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest83() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo0NDQ0Ojo6MjU1LjI1NS4yNTUuMjU1XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest84() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbSVB2Njo6MjU1LjI1NS4yNTUuMjU1XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonstrt)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest85() {
		let email = String(data: Data(base64Encoded: "IHRlc3QgQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest86() {
		let email = String(data: Data(base64Encoded: "dGVzdEAgaWFuYSAuY29t")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest87() {
		let email = String(data: Data(base64Encoded: "dGVzdCAuIHRlc3RAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecFws)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest88() {
		let email = String(data: Data(base64Encoded: "DQogdGVzdEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .cfws) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .cfwsFws)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest89() {
		let email = String(data: Data(base64Encoded: "DQogDQogdGVzdEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecFws)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest90() {
		let email = String(data: Data(base64Encoded: "KGNvbW1lbnQpdGVzdEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .cfws) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .cfwsComment)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest91() {
		let email = String(data: Data(base64Encoded: "KChjb21tZW50KXRlc3RAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedcomment)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest92() {
		let email = String(data: Data(base64Encoded: "KGNvbW1lbnQoY29tbWVudCkpdGVzdEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .cfws) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .cfwsComment)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest93() {
		let email = String(data: Data(base64Encoded: "dGVzdEAoY29tbWVudClpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest94() {
		let email = String(data: Data(base64Encoded: "dGVzdChjb21tZW50KXRlc3RAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterCfws)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest95() {
		let email = String(data: Data(base64Encoded: "dGVzdEAoY29tbWVudClbMjU1LjI1NS4yNTUuMjU1XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest96() {
		let email = String(data: Data(base64Encoded: "KGNvbW1lbnQpYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5emFiY2RlZmdoaWtsbUBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .cfws) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .cfwsComment)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest97() {
		let email = String(data: Data(base64Encoded: "dGVzdEAoY29tbWVudClhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5emFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6YWJjZGVmZ2hpa2wuY29t")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest98() {
		let email = String(data: Data(base64Encoded: "KGNvbW1lbnQpdGVzdEBhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5emFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6YWJjZGVmZ2hpay5hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5emFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6YWJjZGVmZ2hpay5hYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5emFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6YWJjZGVmZ2hpamsuYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXphYmNkZWZnaGlqay5hYmNkZWZnaGlqa2xtbm9wcXJzdHU=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .cfws) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .cfwsComment)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest99() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hLm9yZwo=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest100() {
		let email = String(data: Data(base64Encoded: "dGVzdEB4bi0taHhhamJoZWcyYXozYWwueG4tLWp4YWxwZGxw")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest101() {
		let email = String(data: Data(base64Encoded: "eG4tLXRlc3RAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest102() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hLm9yZy0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDomainhyphenend)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest103() {
		let email = String(data: Data(base64Encoded: "InRlc3RAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedquotedstr)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest104() {
		let email = String(data: Data(base64Encoded: "KHRlc3RAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedcomment)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest105() {
		let email = String(data: Data(base64Encoded: "dGVzdEAoaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedcomment)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest106() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbMS4yLjMuNA==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUncloseddomlit)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest107() {
		let email = String(data: Data(base64Encoded: "InRlc3RcIkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedquotedstr)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest108() {
		let email = String(data: Data(base64Encoded: "KGNvbW1lbnRcKXRlc3RAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedcomment)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest109() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hLm9yZyhjb21tZW50XCk=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedcomment)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest110() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hLm9yZyhjb21tZW50XA==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errBackslashend)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest112() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbUkZDLTUzMjItZG9tYWluLWxpdGVyYWxd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest113() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbUkZDLTUzMjJdLWRvbWFpbi1saXRlcmFsXQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterDomlit)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest114() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbUkZDLTUzMjItW2RvbWFpbi1saXRlcmFsXQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingDtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest115() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbUkZDLTUzMjItXActZG9tYWluLWxpdGVyYWxd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322DomlitObsdtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest116() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbUkZDLTUzMjItXAktZG9tYWluLWxpdGVyYWxd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322DomlitObsdtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest117() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbUkZDLTUzMjItXF0tZG9tYWluLWxpdGVyYWxd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322DomlitObsdtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest118() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbUkZDLTUzMjItZG9tYWluLWxpdGVyYWxcXQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUncloseddomlit)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest119() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbUkZDLTUzMjItZG9tYWluLWxpdGVyYWxc")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errBackslashend)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest120() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbUkZDIDUzMjIgZG9tYWluIGxpdGVyYWxd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest121() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbUkZDLTUzMjItZG9tYWluLWxpdGVyYWxdIChjb21tZW50KQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest122() {
		let email = String(data: Data(base64Encoded: "f0BpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest123() {
		let email = String(data: Data(base64Encoded: "dGVzdEB/Lm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest124() {
		let email = String(data: Data(base64Encoded: "In8iQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecQtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest125() {
		let email = String(data: Data(base64Encoded: "Ilx/IkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecQp)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest126() {
		let email = String(data: Data(base64Encoded: "KH8pdGVzdEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest127() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hLm9yZw0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errCrNoLf)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest128() {
		let email = String(data: Data(base64Encoded: "DXRlc3RAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errCrNoLf)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest129() {
		let email = String(data: Data(base64Encoded: "Ig10ZXN0IkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errCrNoLf)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest130() {
		let email = String(data: Data(base64Encoded: "KA0pdGVzdEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errCrNoLf)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest131() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hLm9yZygNKQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errCrNoLf)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTest132() {
		let email = String(data: Data(base64Encoded: "CnRlc3RAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest133() {
		let email = String(data: Data(base64Encoded: "IgoiQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingQtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest134() {
		let email = String(data: Data(base64Encoded: "IlwKIkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecQp)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest135() {
		let email = String(data: Data(base64Encoded: "KAopdGVzdEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingCtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest136() {
		let email = String(data: Data(base64Encoded: "B0BpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest137() {
		let email = String(data: Data(base64Encoded: "dGVzdEAHLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest138() {
		let email = String(data: Data(base64Encoded: "IgciQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecQtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest139() {
		let email = String(data: Data(base64Encoded: "IlwHIkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecQp)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest140() {
		let email = String(data: Data(base64Encoded: "KAcpdGVzdEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest141() {
		let email = String(data: Data(base64Encoded: "DQp0ZXN0QGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest142() {
		let email = String(data: Data(base64Encoded: "DQogDQp0ZXN0QGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest143() {
		let email = String(data: Data(base64Encoded: "IA0KdGVzdEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest144() {
		let email = String(data: Data(base64Encoded: "IA0KIHRlc3RAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .cfws) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .cfwsFws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest145() {
		let email = String(data: Data(base64Encoded: "IA0KIA0KdGVzdEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest146() {
		let email = String(data: Data(base64Encoded: "IA0KDQp0ZXN0QGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfX2)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest147() {
		let email = String(data: Data(base64Encoded: "IA0KDQogdGVzdEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfX2)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest148() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hLm9yZw0KIA==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .cfws) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .cfwsFws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest149() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hLm9yZw0KIA0KIA==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecFws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest150() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hLm9yZw0K")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest151() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hLm9yZw0KIA0K")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest152() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hLm9yZyANCg==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest153() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hLm9yZyANCiA=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .cfws) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .cfwsFws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest154() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hLm9yZyANCiANCg==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest155() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hLm9yZyANCg0K")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfX2)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest156() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hLm9yZyANCg0KIA==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfX2)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest157() {
		let email = String(data: Data(base64Encoded: "IHRlc3RAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .cfws) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .cfwsFws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest158() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hLm9yZyA=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .cfws) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .cfwsFws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest159() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbSVB2NjoxOjoyOl0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonend)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest160() {
		let email = String(data: Data(base64Encoded: "InRlc3RcwqkiQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingQpair)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest161() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hL2ljYW5uLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domain)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest165() {
		let email = String(data: Data(base64Encoded: "dGVzdC4oY29tbWVudCl0ZXN0QGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecComment)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest166() {
		let email = String(data: Data(base64Encoded: "dGVzdEBvcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Tld)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest167() {
		let email = String(data: Data(base64Encoded: "dGVzdEB0ZXN0LmNvbQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTest168() {
		let email = String(data: Data(base64Encoded: "dGVzdEBuaWMubm8=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal1() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal2() {
		let email = String(data: Data(base64Encoded: "MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Rob <bob@bob.com> (https://isemail.info) */
	func testXMLTestOriginal3() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBzdWIuZG8sY29t")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal4() {
		let email = String(data: Data(base64Encoded: "ImZpcnN0XCJsYXN0IkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal5() {
		let email = String(data: Data(base64Encoded: "Zmlyc3RcQGxhc3RAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal6() {
		let email = String(data: Data(base64Encoded: "ImZpcnN0QGxhc3QiQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal7() {
		let email = String(data: Data(base64Encoded: "ImZpcnN0XFxsYXN0IkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal8() {
		let email = String(data: Data(base64Encoded: "eEB4MjM0NTY3ODkueDIzNDU2Nzg5LngyMzQ1Njc4OS54MjM0NTY3ODkueDIzNDU2Nzg5LngyMzQ1Njc4OS54MjM0NTY3ODkueDIzNDU2Nzg5LngyMzQ1Njc4OS54MjM0NTY3ODkueDIzNDU2Nzg5LngyMzQ1Njc4OS54MjM0NTY3ODkueDIzNDU2Nzg5LngyMzQ1Njc4OS54MjM0NTY3ODkueDIzNDU2Nzg5LngyMzQ1Njc4OS54MjM0NTY3ODkueDIzNDU2Nzg5LngyMzQ1Njc4OS54MjM0NTY3ODkueDIzNDU2Nzg5LngyMzQ1Njc4OS54MjM0NTY3ODkueDI=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From RFC 3696 erratum 1690 (https://www.rfc-editor.org/errata_search.php?rfc=3696&eid=1690) */
	func testXMLTestOriginal9() {
		let email = String(data: Data(base64Encoded: "MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMUAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OS4xMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OS4xMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjMuaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From RFC 3696 erratum 1690 (https://www.rfc-editor.org/errata_search.php?rfc=3696&eid=1690) */
	func testXMLTestOriginal10() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbMTIuMzQuNTYuNzhd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal11() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2Njo6OjEyLjM0LjU2Ljc4XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal12() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo6NDQ0NDoxMi4zNC41Ni43OF0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal13() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo0NDQ0OjU1NTU6NjY2NjoxMi4zNC41Ni43OF0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal14() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2Njo6OjExMTE6MjIyMjozMzMzOjQ0NDQ6NTU1NTo2NjY2XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal15() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo6NDQ0NDo1NTU1OjY2NjZd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal16() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo0NDQ0OjU1NTU6NjY2Njo6XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal17() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo0NDQ0OjU1NTU6NjY2Njo3Nzc3Ojg4ODhd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal18() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEB4MjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjMuaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal19() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEAzY29tLmNvbQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal20() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEAxMjMuaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From RFC 3696 erratum 1690 (https://www.rfc-editor.org/errata_search.php?rfc=3696&eid=1690) */
	func testXMLTestOriginal21() {
		let email = String(data: Data(base64Encoded: "MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwQDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5LjEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5LjEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5LjEyMzQ1LmlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Toolong)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal22() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdA==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNodomain)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal23() {
		let email = String(data: Data(base64Encoded: "MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDVAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322LocalToolong)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal24() {
		let email = String(data: Data(base64Encoded: "LmZpcnN0Lmxhc3RAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal25() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdC5AaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal26() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QuLmxhc3RAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errConsecutivedots)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal27() {
		let email = String(data: Data(base64Encoded: "ImZpcnN0Imxhc3QiQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterQs)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal28() {
		let email = String(data: Data(base64Encoded: "ImZpcnN0XGxhc3QiQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal29() {
		let email = String(data: Data(base64Encoded: "IiIiQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal30() {
		let email = String(data: Data(base64Encoded: "IlwiQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedquotedstr)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal31() {
		let email = String(data: Data(base64Encoded: "IiJAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal32() {
		let email = String(data: Data(base64Encoded: "Zmlyc3RcXEBsYXN0QGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal33() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEA=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNodomain)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal34() {
		let email = String(data: Data(base64Encoded: "eEB4MjM0NTY3ODkueDIzNDU2Nzg5LngyMzQ1Njc4OS54MjM0NTY3ODkueDIzNDU2Nzg5LngyMzQ1Njc4OS54MjM0NTY3ODkueDIzNDU2Nzg5LngyMzQ1Njc4OS54MjM0NTY3ODkueDIzNDU2Nzg5LngyMzQ1Njc4OS54MjM0NTY3ODkueDIzNDU2Nzg5LngyMzQ1Njc4OS54MjM0NTY3ODkueDIzNDU2Nzg5LngyMzQ1Njc4OS54MjM0NTY3ODkueDIzNDU2Nzg5LngyMzQ1Njc4OS54MjM0NTY3ODkueDIzNDU2Nzg5LngyMzQ1Njc4OS54MjM0NTY3ODkueDIzNDU2")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322DomainToolong)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal35() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbLjEyLjM0LjU2Ljc4XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal36() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbMTIuMzQuNTYuNzg5XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal37() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbOjoxMi4zNC41Ni43OF0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal38() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NTo6OjEyLjM0LjU2Ljc4XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal39() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo6NDQ0NDo1NTU1OjEyLjM0LjU2Ljc4XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Ipv6Deprecated)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal40() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo0NDQ0OjU1NTU6MTIuMzQuNTYuNzhd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Grpcount)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal41() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo0NDQ0OjU1NTU6NjY2Njo3Nzc3OjEyLjM0LjU2Ljc4XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Grpcount)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal42() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo0NDQ0OjU1NTU6NjY2Njo3Nzc3XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Grpcount)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal43() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo0NDQ0OjU1NTU6NjY2Njo3Nzc3Ojg4ODg6OTk5OV0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Grpcount)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal44() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjoxMTExOjIyMjI6OjMzMzM6OjQ0NDQ6NTU1NTo2NjY2XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal45() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo6NDQ0NDo1NTU1OjY2NjY6Nzc3N10=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Ipv6Deprecated)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal46() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjoxMTExOjIyMjI6MzMzeDo6NDQ0NDo1NTU1XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Badchar)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal47() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzM6OjQ0NDQ6NTU1NV0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Badchar)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal48() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBleGFtcGxlLjEyMw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Tldnumeric)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal49() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBjb20=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Tld)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal50() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEAteGFtcGxlLmNvbQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDomainhyphenstart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal51() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBleGFtcGwtLmNvbQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDomainhyphenend)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal52() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEB4MjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0LmlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322LabelToolong)
	}
	
	/* From RFC 3696 (February 2004) (https://tools.ietf.org/html/rfc3696#section-3) */
	func testXMLTestOriginal53() {
		let email = String(data: Data(base64Encoded: "IkFiY1xAZGVmIkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From RFC 3696 (as amended by erratum 2005-07-09) (https://www.rfc-editor.org/errata_search.php?rfc=3696&eid=246) */
	func testXMLTestOriginal54() {
		let email = String(data: Data(base64Encoded: "IkZyZWRcIEJsb2dncyJAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From RFC 3696 (as amended by erratum 2005-07-09) (https://www.rfc-editor.org/errata_search.php?rfc=3696&eid=246) */
	func testXMLTestOriginal55() {
		let email = String(data: Data(base64Encoded: "IkpvZS5cXEJsb3ciQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From RFC 3696 (as amended by erratum 2005-07-09) (https://www.rfc-editor.org/errata_search.php?rfc=3696&eid=246) */
	func testXMLTestOriginal56() {
		let email = String(data: Data(base64Encoded: "IkFiY0BkZWYiQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From RFC 3696 (February 2004) (https://tools.ietf.org/html/rfc3696#section-3) */
	func testXMLTestOriginal57() {
		let email = String(data: Data(base64Encoded: "IkZyZWQgQmxvZ2dzIkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From RFC 3696 (February 2004) (https://tools.ietf.org/html/rfc3696#section-3) */
	func testXMLTestOriginal58() {
		let email = String(data: Data(base64Encoded: "dXNlcittYWlsYm94QGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From RFC 3696 (February 2004) (https://tools.ietf.org/html/rfc3696#section-3) */
	func testXMLTestOriginal59() {
		let email = String(data: Data(base64Encoded: "Y3VzdG9tZXIvZGVwYXJ0bWVudD1zaGlwcGluZ0BpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From RFC 3696 (February 2004) (https://tools.ietf.org/html/rfc3696#section-3) */
	func testXMLTestOriginal60() {
		let email = String(data: Data(base64Encoded: "JEExMjM0NUBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From RFC 3696 (February 2004) (https://tools.ietf.org/html/rfc3696#section-3) */
	func testXMLTestOriginal61() {
		let email = String(data: Data(base64Encoded: "IWRlZiF4eXolYWJjQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From RFC 3696 (February 2004) (https://tools.ietf.org/html/rfc3696#section-3) */
	func testXMLTestOriginal62() {
		let email = String(data: Data(base64Encoded: "X3NvbWVuYW1lQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal63() {
		let email = String(data: Data(base64Encoded: "ZGNsb0B1cy5pYm0uY29t")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal64() {
		let email = String(data: Data(base64Encoded: "YWJjXEBkZWZAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal65() {
		let email = String(data: Data(base64Encoded: "YWJjXFxAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal66() {
		let email = String(data: Data(base64Encoded: "cGV0ZXIucGlwZXJAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal67() {
		let email = String(data: Data(base64Encoded: "RG91Z1wgXCJBY2VcIlwgTG92ZWxsQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal68() {
		let email = String(data: Data(base64Encoded: "IkRvdWcgXCJBY2VcIiBMLiJAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal69() {
		let email = String(data: Data(base64Encoded: "YWJjQGRlZkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal70() {
		let email = String(data: Data(base64Encoded: "YWJjXFxAZGVmQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal71() {
		let email = String(data: Data(base64Encoded: "YWJjXEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal72() {
		let email = String(data: Data(base64Encoded: "QGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNolocalpart)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal73() {
		let email = String(data: Data(base64Encoded: "ZG91Z0A=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNodomain)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal74() {
		let email = String(data: Data(base64Encoded: "InF1QGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedquotedstr)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal75() {
		let email = String(data: Data(base64Encoded: "b3RlIkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal76() {
		let email = String(data: Data(base64Encoded: "LmRvdEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal77() {
		let email = String(data: Data(base64Encoded: "ZG90LkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotEnd)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal78() {
		let email = String(data: Data(base64Encoded: "dHdvLi5kb3RAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errConsecutivedots)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal79() {
		let email = String(data: Data(base64Encoded: "IkRvdWcgIkFjZSIgTC4iQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterQs)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal80() {
		let email = String(data: Data(base64Encoded: "RG91Z1wgXCJBY2VcIlwgTFwuQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal81() {
		let email = String(data: Data(base64Encoded: "aGVsbG8gd29ybGRAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterCfws)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal82() {
		let email = String(data: Data(base64Encoded: "Z2F0c2J5QGYuc2Mub3QudC5mLmkudHpnLmVyYS5sLmQu")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotEnd)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal83() {
		let email = String(data: Data(base64Encoded: "dGVzdEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal84() {
		let email = String(data: Data(base64Encoded: "VEVTVEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal85() {
		let email = String(data: Data(base64Encoded: "MTIzNDU2Nzg5MEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal86() {
		let email = String(data: Data(base64Encoded: "dGVzdCt0ZXN0QGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal87() {
		let email = String(data: Data(base64Encoded: "dGVzdC10ZXN0QGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal88() {
		let email = String(data: Data(base64Encoded: "dCplc3RAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal89() {
		let email = String(data: Data(base64Encoded: "KzF+MStAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal90() {
		let email = String(data: Data(base64Encoded: "e190ZXN0X31AaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal91() {
		let email = String(data: Data(base64Encoded: "IltbIHRlc3QgXV0iQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal92() {
		let email = String(data: Data(base64Encoded: "dGVzdC50ZXN0QGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal93() {
		let email = String(data: Data(base64Encoded: "InRlc3QudGVzdCJAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal94() {
		let email = String(data: Data(base64Encoded: "dGVzdC4idGVzdCJAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal95() {
		let email = String(data: Data(base64Encoded: "InRlc3RAdGVzdCJAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal96() {
		let email = String(data: Data(base64Encoded: "dGVzdEAxMjMuMTIzLjEyMy54MTIz")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal97() {
		let email = String(data: Data(base64Encoded: "dGVzdEAxMjMuMTIzLjEyMy4xMjM=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Tldnumeric)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal98() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbMTIzLjEyMy4xMjMuMTIzXQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal99() {
		let email = String(data: Data(base64Encoded: "dGVzdEBleGFtcGxlLmlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal100() {
		let email = String(data: Data(base64Encoded: "dGVzdEBleGFtcGxlLmV4YW1wbGUuaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal101() {
		let email = String(data: Data(base64Encoded: "dGVzdC5pYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNodomain)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal102() {
		let email = String(data: Data(base64Encoded: "dGVzdC5AaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotEnd)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal103() {
		let email = String(data: Data(base64Encoded: "dGVzdC4udGVzdEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errConsecutivedots)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal104() {
		let email = String(data: Data(base64Encoded: "LnRlc3RAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal105() {
		let email = String(data: Data(base64Encoded: "dGVzdEB0ZXN0QGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal106() {
		let email = String(data: Data(base64Encoded: "dGVzdEBAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal107() {
		let email = String(data: Data(base64Encoded: "LS0gdGVzdCAtLUBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterCfws)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal108() {
		let email = String(data: Data(base64Encoded: "W3Rlc3RdQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal109() {
		let email = String(data: Data(base64Encoded: "InRlc3RcdGVzdCJAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal110() {
		let email = String(data: Data(base64Encoded: "InRlc3QidGVzdCJAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterQs)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal111() {
		let email = String(data: Data(base64Encoded: "KClbXVw7Oiw+PEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal112() {
		let email = String(data: Data(base64Encoded: "dGVzdEAu")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal113() {
		let email = String(data: Data(base64Encoded: "dGVzdEBleGFtcGxlLg==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotEnd)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal114() {
		let email = String(data: Data(base64Encoded: "dGVzdEAub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal115() {
		let email = String(data: Data(base64Encoded: "dGVzdEAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjMuMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzLjEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMy4xMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAuY29t")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322DomainToolong)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal116() {
		let email = String(data: Data(base64Encoded: "dGVzdEBleGFtcGxl")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Tld)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal117() {
		let email = String(data: Data(base64Encoded: "dGVzdEBbMTIzLjEyMy4xMjMuMTIz")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUncloseddomlit)
	}
	
	/* From Dave Child (https://code.google.com/p/php-email-address-validation/) */
	func testXMLTestOriginal118() {
		let email = String(data: Data(base64Encoded: "dGVzdEAxMjMuMTIzLjEyMy4xMjNd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal119() {
		let email = String(data: Data(base64Encoded: "Tm90QW5FbWFpbA==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNodomain)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal120() {
		let email = String(data: Data(base64Encoded: "QE5vdEFuRW1haWw=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNolocalpart)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal121() {
		let email = String(data: Data(base64Encoded: "InRlc3RcXGJsYWgiQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal122() {
		let email = String(data: Data(base64Encoded: "InRlc3RcYmxhaCJAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal123() {
		let email = String(data: Data(base64Encoded: "InRlc3RcDWJsYWgiQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecQp)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal124() {
		let email = String(data: Data(base64Encoded: "InRlc3QNYmxhaCJAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errCrNoLf)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal125() {
		let email = String(data: Data(base64Encoded: "InRlc3RcImJsYWgiQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal126() {
		let email = String(data: Data(base64Encoded: "InRlc3QiYmxhaCJAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterQs)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal127() {
		let email = String(data: Data(base64Encoded: "Y3VzdG9tZXIvZGVwYXJ0bWVudEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal128() {
		let email = String(data: Data(base64Encoded: "X1lvc2VtaXRlLlNhbUBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal129() {
		let email = String(data: Data(base64Encoded: "fkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal130() {
		let email = String(data: Data(base64Encoded: "Lndvb2x5QGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal131() {
		let email = String(data: Data(base64Encoded: "d28uLm9seUBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errConsecutivedots)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal132() {
		let email = String(data: Data(base64Encoded: "cG9vdGlldGFuZy5AaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotEnd)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal133() {
		let email = String(data: Data(base64Encoded: "LkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal134() {
		let email = String(data: Data(base64Encoded: "IkF1c3RpbkBQb3dlcnMiQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal135() {
		let email = String(data: Data(base64Encoded: "SW1hLkZvb2xAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal136() {
		let email = String(data: Data(base64Encoded: "IkltYS5Gb29sIkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal137() {
		let email = String(data: Data(base64Encoded: "IkltYSBGb29sIkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal138() {
		let email = String(data: Data(base64Encoded: "SW1hIEZvb2xAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterCfws)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal139() {
		let email = String(data: Data(base64Encoded: "cGhpbC5oXEBcQGNrQGhhYWNrZWQuY29t")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal140() {
		let email = String(data: Data(base64Encoded: "ImZpcnN0Ii4ibGFzdCJAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal141() {
		let email = String(data: Data(base64Encoded: "ImZpcnN0Ii5taWRkbGUuImxhc3QiQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal142() {
		let email = String(data: Data(base64Encoded: "ImZpcnN0XFwibGFzdCJAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterQs)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal143() {
		let email = String(data: Data(base64Encoded: "ImZpcnN0Ii5sYXN0QGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal144() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QuImxhc3QiQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal145() {
		let email = String(data: Data(base64Encoded: "ImZpcnN0Ii4ibWlkZGxlIi4ibGFzdCJAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal146() {
		let email = String(data: Data(base64Encoded: "ImZpcnN0Lm1pZGRsZSIuImxhc3QiQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal147() {
		let email = String(data: Data(base64Encoded: "ImZpcnN0Lm1pZGRsZS5sYXN0IkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal148() {
		let email = String(data: Data(base64Encoded: "ImZpcnN0Li5sYXN0IkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal149() {
		let email = String(data: Data(base64Encoded: "Zm9vQFtcMS4yLjMuNF0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322DomlitObsdtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal150() {
		let email = String(data: Data(base64Encoded: "ImZpcnN0XFxcImxhc3QiQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal151() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QuIm1pZFxkbGUiLiJsYXN0IkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal152() {
		let email = String(data: Data(base64Encoded: "VGVzdC4NCiBGb2xkaW5nLg0KIFdoaXRlc3BhY2VAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecFws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal153() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QuIiIubGFzdEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal154() {
		let email = String(data: Data(base64Encoded: "Zmlyc3RcbGFzdEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From RFC 3696 erratum 246 (https://www.rfc-editor.org/errata_search.php?rfc=3696&eid=246) */
	func testXMLTestOriginal155() {
		let email = String(data: Data(base64Encoded: "QWJjXEBkZWZAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From RFC 3696 erratum 246 (https://www.rfc-editor.org/errata_search.php?rfc=3696&eid=246) */
	func testXMLTestOriginal156() {
		let email = String(data: Data(base64Encoded: "RnJlZFwgQmxvZ2dzQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From RFC 3696 erratum 246 (https://www.rfc-editor.org/errata_search.php?rfc=3696&eid=246) */
	func testXMLTestOriginal157() {
		let email = String(data: Data(base64Encoded: "Sm9lLlxcQmxvd0BpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal158() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjoxMTExOjIyMjI6MzMzMzo0NDQ0OjU1NTU6NjY2NjoxMi4zNC41NjcuODld")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Badchar)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal159() {
		let email = String(data: Data(base64Encoded: "InRlc3RcDQogYmxhaCJAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingQtext)
	}
	
	/* From Phil Haack (https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx) */
	func testXMLTestOriginal160() {
		let email = String(data: Data(base64Encoded: "InRlc3QNCiBibGFoIkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .cfws) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .cfwsFws)
	}
	
	/* From Doug Lovell (LinuxJournal, June 2007) (https://www.linuxjournal.com/article/9585) */
	func testXMLTestOriginal161() {
		let email = String(data: Data(base64Encoded: "e15jXEAqKkRvZ159QGNhcnRvb24uY29t")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal162() {
		let email = String(data: Data(base64Encoded: "KGZvbyljYWwoYmFyKUAoYmF6KWlhbWNhbC5jb20ocXV1eCk=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal163() {
		let email = String(data: Data(base64Encoded: "Y2FsQGlhbWNhbCh3b28pLih5YXkpY29t")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecComment)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal164() {
		let email = String(data: Data(base64Encoded: "ImZvbyIoeWF5KUAoaG9vcGxhKVsxLjIuMy40XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal165() {
		let email = String(data: Data(base64Encoded: "Y2FsKHdvbyh5YXkpaG9vcGxhKUBpYW1jYWwuY29t")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal166() {
		let email = String(data: Data(base64Encoded: "Y2FsKGZvb1xAYmFyKUBpYW1jYWwuY29t")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal167() {
		let email = String(data: Data(base64Encoded: "Y2FsKGZvb1wpYmFyKUBpYW1jYWwuY29t")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal168() {
		let email = String(data: Data(base64Encoded: "Y2FsKGZvbyhiYXIpQGlhbWNhbC5jb20=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedcomment)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal169() {
		let email = String(data: Data(base64Encoded: "Y2FsKGZvbyliYXIpQGlhbWNhbC5jb20=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterCfws)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal170() {
		let email = String(data: Data(base64Encoded: "Y2FsKGZvb1wpQGlhbWNhbC5jb20=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedcomment)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal171() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QoKS5sYXN0QGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal172() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QuKA0KIG1pZGRsZQ0KIClsYXN0QGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecComment)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal173() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QoMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTApbGFzdEAoMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MClpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterCfws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal174() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QoV2VsY29tZSB0bw0KIHRoZSAoIndvbmRlcmZ1bCIgKCEpKSB3b3JsZA0KIG9mIGVtYWlsKUBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From RFC 5322 (https://tools.ietf.org/html/rfc5322) */
	func testXMLTestOriginal175() {
		let email = String(data: Data(base64Encoded: "cGV0ZShoaXMgYWNjb3VudClAc2lsbHkudGVzdChoaXMgaG9zdCk=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From RFC 5322 (https://tools.ietf.org/html/rfc5322) */
	func testXMLTestOriginal176() {
		let email = String(data: Data(base64Encoded: "Y0AoQ2hyaXMncyBob3N0LilwdWJsaWMuZXhhbXBsZQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From RFC 5322 (https://tools.ietf.org/html/rfc5322) */
	func testXMLTestOriginal177() {
		let email = String(data: Data(base64Encoded: "amRvZUBtYWNoaW5lKGNvbW1lbnQpLiAgZXhhbXBsZQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecFws)
	}
	
	/* From RFC 5322 (https://tools.ietf.org/html/rfc5322) */
	func testXMLTestOriginal178() {
		let email = String(data: Data(base64Encoded: "MTIzNCAgIEAgICBsb2NhbChibGFoKSAgLm1hY2hpbmUgLmV4YW1wbGU=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal179() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QobWlkZGxlKWxhc3RAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterCfws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal180() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QoYWJjLmRlZikubGFzdEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal181() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QoYSJiYy5kZWYpLmxhc3RAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal182() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QuKCIpbWlkZGxlLmxhc3QoIilAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal183() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QoYWJjKCJkZWYiLmdoaSkubW5vKW1pZGRsZShhYmMoImRlZiIuZ2hpKS5tbm8pLmxhc3RAKGFiYygiZGVmIi5naGkpLm1ubylleGFtcGxlKGFiYygiZGVmIi5naGkpLm1ubykuKGFiYygiZGVmIi5naGkpLm1ubyljb20oYWJjKCJkZWYiLmdoaSkubW5vKQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterCfws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal184() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QoYWJjXChkZWYpQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal185() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBpYW5hKDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTApLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .cfws) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .cfwsComment)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal186() {
		let email = String(data: Data(base64Encoded: "YShhKGIoYylkKGUoZikpZyloKGkpailAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Cal Henderson (https://code.iamcal.com/php/rfc822/) */
	func testXMLTestOriginal187() {
		let email = String(data: Data(base64Encoded: "YShhKGIoYylkKGUoZikpZykoaChpKWopQGlhbmEub3Jn")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errUnclosedcomment)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal188() {
		let email = String(data: Data(base64Encoded: "bmFtZS5sYXN0bmFtZUBkb21haW4uY29t")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal189() {
		let email = String(data: Data(base64Encoded: "LkA=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal190() {
		let email = String(data: Data(base64Encoded: "YUBi")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Tld)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal191() {
		let email = String(data: Data(base64Encoded: "QGJhci5jb20=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNolocalpart)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal192() {
		let email = String(data: Data(base64Encoded: "QEBiYXIuY29t")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNolocalpart)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal193() {
		let email = String(data: Data(base64Encoded: "YUBiYXIuY29t")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal194() {
		let email = String(data: Data(base64Encoded: "YWFhLmNvbQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errNodomain)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal195() {
		let email = String(data: Data(base64Encoded: "YWFhQC5jb20=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal196() {
		let email = String(data: Data(base64Encoded: "YWFhQC4xMjM=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal197() {
		let email = String(data: Data(base64Encoded: "YWFhQFsxMjMuMTIzLjEyMy4xMjNd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal198() {
		let email = String(data: Data(base64Encoded: "YWFhQFsxMjMuMTIzLjEyMy4xMjNdYQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterDomlit)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal199() {
		let email = String(data: Data(base64Encoded: "YWFhQFsxMjMuMTIzLjEyMy4zMzNd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal200() {
		let email = String(data: Data(base64Encoded: "YUBiYXIuY29tLg==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotEnd)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal201() {
		let email = String(data: Data(base64Encoded: "YUBiYXI=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Tld)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal202() {
		let email = String(data: Data(base64Encoded: "YS1iQGJhci5jb20=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal203() {
		let email = String(data: Data(base64Encoded: "K0BiLmM=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal204() {
		let email = String(data: Data(base64Encoded: "K0BiLmNvbQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal205() {
		let email = String(data: Data(base64Encoded: "YUAtYi5jb20=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDomainhyphenstart)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal206() {
		let email = String(data: Data(base64Encoded: "YUBiLS5jb20=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDomainhyphenend)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal207() {
		let email = String(data: Data(base64Encoded: "LUAuLmNvbQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal208() {
		let email = String(data: Data(base64Encoded: "LUBhLi5jb20=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errConsecutivedots)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal209() {
		let email = String(data: Data(base64Encoded: "YUBiLmNvLWZvby51aw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal210() {
		let email = String(data: Data(base64Encoded: "ImhlbGxvIG15IG5hbWUgaXMiQHN0dXR0ZXIuY29t")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal211() {
		let email = String(data: Data(base64Encoded: "IlRlc3QgXCJGYWlsXCIgSW5nIkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal212() {
		let email = String(data: Data(base64Encoded: "dmFsaWRAYWJvdXQubXVzZXVt")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal213() {
		let email = String(data: Data(base64Encoded: "aW52YWxpZEBhYm91dC5tdXNldW0t")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDomainhyphenend)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal214() {
		let email = String(data: Data(base64Encoded: "c2hhaXRhbkBteS1kb21haW4udGhpc2lzbWluZWt0aHg=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal215() {
		let email = String(data: Data(base64Encoded: "dGVzdEAuLi4uLi4uLi4uLmNvbQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal216() {
		let email = String(data: Data(base64Encoded: "Zm9vYmFyQDE5Mi4xNjguMC4x")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Tldnumeric)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal217() {
		let email = String(data: Data(base64Encoded: "IkpvZVxcQmxvdyJAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal218() {
		let email = String(data: Data(base64Encoded: "SW52YWxpZCBcCiBGb2xkaW5nIFwKIFdoaXRlc3BhY2VAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterCfws)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal219() {
		let email = String(data: Data(base64Encoded: "SE0yS2luc2lzdHNAKHRoYXQgY29tbWVudHMgYXJlIGFsbG93ZWQpdGhpcy5pcy5vaw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Paul Gregg (https://pgregg.com/projects/php/code/showvalidemail.php) */
	func testXMLTestOriginal220() {
		let email = String(data: Data(base64Encoded: "dXNlciV1dWNwIXBhdGhAYmVya2VsZXkuZWR1")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal221() {
		let email = String(data: Data(base64Encoded: "ImZpcnN0KGxhc3QpIkBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal222() {
		let email = String(data: Data(base64Encoded: "IA0KICgNCiB4IA0KICkgDQogZmlyc3QNCiAoIA0KIHgNCiApIA0KIC4NCiAoIA0KIHgpIA0KIGxhc3QgDQogKCAgeCANCiApIA0KIEBpYW5hLm9yZw==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From John Kloor (https://isemail.info) */
	func testXMLTestOriginal223() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdCBAaWFuYS5vcmc=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From George Pollard (https://porg.es/blog/properly-validating-e-mail-addresses) */
	func testXMLTestOriginal224() {
		let email = String(data: Data(base64Encoded: "dGVzdC4gDQogDQogb2JzQHN5bnRheC5jb20=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecFws)
	}
	
	/* From George Pollard (https://porg.es/blog/properly-validating-e-mail-addresses) */
	func testXMLTestOriginal225() {
		let email = String(data: Data(base64Encoded: "dGVzdC4NCg0KIG9ic0BzeW50YXguY29t")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errFwsCrlfX2)
	}
	
	/* From George Pollard (https://porg.es/blog/properly-validating-e-mail-addresses) */
	func testXMLTestOriginal226() {
		let email = String(data: Data(base64Encoded: "IlVuaWNvZGUgTlVMTCBcACJAY2hhci5jb20=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .deprec) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .deprecQp)
	}
	
	/* From George Pollard (https://porg.es/blog/properly-validating-e-mail-addresses) */
	func testXMLTestOriginal227() {
		let email = String(data: Data(base64Encoded: "IlVuaWNvZGUgTlVMTCAAIkBjaGFyLmNvbQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingQtext)
	}
	
	/* From George Pollard (https://porg.es/blog/properly-validating-e-mail-addresses) */
	func testXMLTestOriginal228() {
		let email = String(data: Data(base64Encoded: "VW5pY29kZSBOVUxMIFwAQGNoYXIuY29t")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errAtextAfterCfws)
	}
	
	/* From cdburgess (https://isemail.info/#comment-30024957) */
	func testXMLTestOriginal229() {
		let email = String(data: Data(base64Encoded: "Y2RidXJnZXNzKyEjJCUmJyotLz0/K197fXx+dGVzdEBnbWFpbC5jb20=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal230() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2Njo6OmEyOmEzOmE0OmIxOmIyOmIzOmI0XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Ipv6Deprecated)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal231() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMTphMjphMzphNDpiMTpiMjpiMzo6XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Ipv6Deprecated)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal232() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2Njo6XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonstrt)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal233() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2Njo6Ol0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal234() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2Njo6Ojpd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal235() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2Njo6YjRd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonstrt)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal236() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2Njo6OmI0XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal237() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2Njo6OjpiNF0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal238() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2Njo6YjM6YjRd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonstrt)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal239() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2Njo6OmIzOmI0XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal240() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2Njo6OjpiMzpiNF0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal241() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMTo6YjRd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal242() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMTo6OmI0XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal243() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMTpd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonend)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal244() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMTo6XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal245() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMTo6Ol0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal246() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMTphMjpd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonend)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal247() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMTphMjo6XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal248() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMTphMjo6Ol0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal249() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjowMTIzOjQ1Njc6ODlhYjpjZGVmOjpd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal250() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjowMTIzOjQ1Njc6ODlhYjpDREVGOjpd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal251() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2Njo6OmEzOmE0OmIxOmZmZmY6MTEuMjIuMzMuNDRd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal252() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2Njo6OmEyOmEzOmE0OmIxOmZmZmY6MTEuMjIuMzMuNDRd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Ipv6Deprecated)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal253() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMTphMjphMzphNDo6MTEuMjIuMzMuNDRd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal254() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMTphMjphMzphNDpiMTo6MTEuMjIuMzMuNDRd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Ipv6Deprecated)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal255() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2Njo6MTEuMjIuMzMuNDRd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonstrt)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal256() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2Njo6OjoxMS4yMi4zMy40NF0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal257() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMToxMS4yMi4zMy40NF0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Grpcount)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal258() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMTo6MTEuMjIuMzMuNDRd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal259() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMTo6OjExLjIyLjMzLjQ0XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal260() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMTphMjo6MTEuMjIuMzMuNDRd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal261() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMTphMjo6OjExLjIyLjMzLjQ0XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal262() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjowMTIzOjQ1Njc6ODlhYjpjZGVmOjoxMS4yMi4zMy40NF0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal263() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjowMTIzOjQ1Njc6ODlhYjpjZGVmOjoxMS4yMi4zMy54eF0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Badchar)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal264() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjowMTIzOjQ1Njc6ODlhYjpDREVGOjoxMS4yMi4zMy40NF0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal265() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjowMTIzOjQ1Njc6ODlhYjpDREVGRjo6MTEuMjIuMzMuNDRd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Badchar)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal266() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMTo6YTQ6YjE6OmI0OjExLjIyLjMzLjQ0XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal267() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMTo6MTEuMjIuMzNd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Badchar)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal268() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMTo6MTEuMjIuMzMuNDQuNTVd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Badchar)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal269() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMTo6YjIxMS4yMi4zMy40NF0=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Badchar)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal270() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMTo6YjI6MTEuMjIuMzMuNDRd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5321) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal271() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMTo6YjI6OjExLjIyLjMzLjQ0XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal272() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMTo6YjM6XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonend)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal273() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2Njo6YTI6OmI0XQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonstrt)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal274() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMTphMjphMzphNDpiMTpiMjpiMzpd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonend)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal275() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2Njo6YTI6YTM6YTQ6YjE6YjI6YjM6YjRd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonstrt)
	}
	
	/* From Daniel Marschall (https://isemail.info) */
	func testXMLTestOriginal276() {
		let email = String(data: Data(base64Encoded: "Zmlyc3QubGFzdEBbSVB2NjphMTphMjphMzphNDo6YjE6YjI6YjM6YjRd")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .rfc5322) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .rfc5322Ipv6Maxgrps)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestOriginal277() {
		let email = String(data: Data(base64Encoded: "dGVzdEB0ZXN0LmNvbQ==")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestOriginal278() {
		let email = String(data: Data(base64Encoded: "dGVzdEBleGFtcGxlLmNvbQo=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .err) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestOriginal279() {
		let email = String(data: Data(base64Encoded: "dGVzdEB4bi0tZXhhbXBsZS5jb20=")!, encoding: .utf8)!
		let (validationResult, _, _) = EmailValidator(string: email).evaluateEmail()
//		XCTAssertEqual(validationResult.category, .validCategory) /* On the original test set, the category is sometimes not correct. We _cannot_ fail the category (linked with diagnosis by autogeneration), so we don’t test that. */
		XCTAssertEqual(validationResult, .valid)
	}
	
}
